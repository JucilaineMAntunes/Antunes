checkprivate: $('#checkprivate').val()     
checkprivate: $('#checkprivate').prop('checked')

=======================phone-contacts.js=================
tem comando para nao marcar duas linhas

============

//if (rowData['privateUserGuid'] != null)

            (<any>dataTable).button(1).enable(rowData['privateUserGuid'] !== null);

            (<any>dataTable).button(2).enable(rowData['privateUserGuid'] !== null);

            //setInterval(function () {
            //}, 10000);


            //(<any>dataTable).button(1).enable(rowData['privateUserGuid'] != null);
            ////else
            ////    (<any>dataTable).button(1).disable();

            //e.stopPropagation();
            //e.preventDefault();
================mostra jaison===================
http://localhost:9050/api/stations
http://localhost:9050/api/phone-contacts

===========
   //(<any>dataTable).buttons().disable();
   //(<any>dataTable).button(0).enable();
 =================if check
 
 $('#CheckPrivate').is(":checked");
 
     if (model.CheckPrivate)
                            model.PrivateUserGuid = userIdentity.Guid;
							
							
							
      if (record.privateUserGuid !== null) {                            
                            $('#Checkprivate').prop('checked', true);
                            
                        } else {
                            $('#Checkprivate').prop('checked', false);
                        }							
 ================================decode e IF=======================
  
  (<any>dataTable).button(1).enable(rowData['privateUserGuid'] != null);
  
	When(x => string.IsNullOrWhiteSpace(x.HomeNumber) && string.IsNullOrWhiteSpace(x.BusinessNumber), () => 
	{
		RuleFor(x => x.CellPhoneNumber).NotNull().NotEmpty().WithGlobalMessage(WebResources.ValidationError_EmptyPhoneNumber);
	} );  
    
  
 ====================================================
 
 snmpVersion = (int?)svc.SnmpVersion,
 
 public int? TransmissionGain { get; set; } = 0;
 
 ============================
  
 for (let field in errors) {
                    var id = field.split(".").pop();
                    $(`#${id} ~ .invalid-feedback`).show().html(errors[field].map(x => x.errorMessage).join('<br/>'));
                }
=============================	DECODE  =================================

PrivateUserGuid = item.CheckPrivate ? item.PrivateUserGuid : null,		



        private List<PhoneContactModel> FromDbPhoneContactsModelList(IEnumerable<dbModels.PhoneContactModel> phoneContacts)
        {
            List<PhoneContactModel> result = new List<PhoneContactModel>();
            foreach (var item in phoneContacts)
            {
                var phoneContactModel = new PhoneContactModel()
                {

                    Guid = item.Guid,
                    PrivateUserGuid = item.CheckPrivate ? item.PrivateUserGuid : null,
                    Name = item.Name,
                    HomeNumber = item.HomeNumber,
                    CellPhoneNumber = item.CellPhoneNumber,
                    BusinessNumber = item.BusinessNumber,
                    FaxNumber = item.FaxNumber,
                    ExtensionLine = item.ExtensionLine,
                    Email = item.Email,
                    Address = item.Address,
                    MoreInfo = item.MoreInfo,
                    CheckPrivate = item.CheckPrivate
                };

                if (item.CheckPrivate)
                {
                    phoneContactModel.PrivateUserGuid = item.PrivateUserGuid;
                }

                result.Add(phoneContactModel);

            }
            return result;
        }
=============================OLD CODIGO ACIMA

private List<PhonePatchModel> FromDbPhonePatchModelList(IEnumerable<dbModels.PhonePatchModel> phonePatches)
        {
            List<PhonePatchModel> result = new List<PhonePatchModel>();
            foreach(var item in phonePatches)
            {
                result.Add(new PhonePatchModel()
                {
                    AccountName = item.AccountName,
                    Alias = item.Alias,
                    Extension = item.Extension,
                    AutoDetectNat = item.AutoDetectNat,
                    AutoGain = item.AutoGain,
                    BusyTone = item.BusyTone,
                    Codecs = item.Codecs,
                    CourtesyTone = item.CourtesyTone,
                    DomainName = item.DomainName,
                    DtmfMode = item.DtmfMode,
                    EchoCancellation = item.EchoCancellation,
                    ExpirationTime = item.ExpirationTime,
                    Guid = item.Guid,
                    KeepAliveInterval = item.KeepAliveInterval,
                    KeepAliveMode = item.KeepAliveMode,
                    NatTraversal = item.NatTraversal,
                   
                });
            }
            return result;
 
 
 
 fsiRepeater_nac    public int? Nac { get; set; } = 0x293;
 fsiRepeater_voicePort
 
 
 fsiRepeater_udpMinPort --
 fsiRepeater_controlPort==
 fsiRepeater_udpMaxPort  --
 fsiRepeater_voicePort==
 fsiRepeater_dataPort==
 fsiRepeater_controlPort
 fsiRepeater_id
 
 
 btnConfirmDeletePhoneContact
 PhonePatchConfirmDeletionMessage
 PhoneContactConfirmDeletionMessage
 
 Tem certeza que deseja excluír o Telefônico?
 Tem certeza que quer excluir o contato telefônico?