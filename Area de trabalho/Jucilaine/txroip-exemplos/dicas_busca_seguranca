http://localhost:9050/api/securities

http://localhost:9050/api/security-properties


http://localhost:9050/api/users/40125f5e8cd94bf8a04eb1632df89ab1/security-properties/groups/web/properties/ChangePublicPhoneContacts

using System.Collections.Generic;
using System.Linq;

namespace Remota.Network
{
    public class TransmissionGroupCommand : Command
    {
        public string Guid { get; set; }
        public string Alias { get; set; }
        public List<string> DispatchDeviceGuids { get; set; }

        public override void WriteDataTo(CustomBinaryWriter Writer)
        {
            base.WriteDataTo(Writer);

            DispatchDeviceGuids = DispatchDeviceGuids ?? new List<string>();

            Writer.Write(Guid);
            Writer.Write(Alias);
            Writer.WriteArray(DispatchDeviceGuids.ToArray());
        }

        public override void SetDataFrom(CustomBinaryReader Reader)
        {
            base.SetDataFrom(Reader);

            Guid = Reader.ReadString();
            Alias = Reader.ReadString();
            DispatchDeviceGuids = Reader.ReadStringArray().ToList();
        }
    }
}using System;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNet.SignalR;
using Microsoft.AspNet.SignalR.Infrastructure;
using Microsoft.Owin.Security;
using Nancy;
using Nancy.Authentication.Forms;
using Nancy.Helpers;
using Nancy.ModelBinding;
using Remota.Services.Shared.Domain.Security.Services.Interfaces;
using Remota.Services.Shared.Infrastructure.Repository.Interfaces;
using Remota.Shared.Enums;
using Remota.Shared.Exceptions;
using Remota.Shared.Services;
using Remota.WebConfig.Models;
using Remota.WebConfig.Resources;
using System.Collections.Generic;
using Remota.Server.Database.Models;

namespace Remota.WebConfig.Modules
{
    public sealed class LoginModule : NancyModule
    {
        ILoggerService _logger;
        UserMapper _mapper;
        IAuthenticationService _authService;
        IUserSessionService _userSessionService;
        ISecurityService _security;

        public LoginModule(ILoggerService logger, UserMapper mapper, IAuthenticationService authService, IUserSessionService userSessionService)
        {
            _logger = logger;
            _mapper = mapper;
            _authService = authService;
            _userSessionService = userSessionService;            
        

            Get["/"] = Get["/web"] = _ =>
                Response.AsRedirect($"/web/{(Context.CurrentUser == null ? "login" : "monitor")}");

            Get["/web/login"] = _ =>
            {
                try
                {
                    var message = Request.Query["message"];

                    if (Request.Query["error"] == "invalid")
                        message = message ?? WebResources.Error_InvalidUsernameOrPassword;

                    return View["Login.cshtml", new
                    {
                        SystemType = "TXRoIP System",
                        ErrorMessage = message,
                        SystemVersion = GetSystemVersion()
                    }];
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.InternalServerError);
                }
            };

            Get["/logout", true] = async (_, __) =>
            {
                if (Context.CurrentUser is UserIdentity identity)
                    await _mapper.UnregisterUserAsync(identity);

                return this.LogoutAndRedirect("~/web/login");
            };

            Post["web/login", true] = async (_, __) =>
            {
                try
                {
                    LoginModel login = this.Bind<LoginModel>();
                    await Task.Delay(TimeSpan.FromSeconds(.5));

                    Server.Database.Models.UserModel user = null;
                    try
                    {                       
                        user = await _authService.AuthenticateAsync(Shared.Enums.SessionType.Web, login.Username, login.Password, Network.ConsoleCommandType.Other).ConfigureAwait(false);

                        List<string> list = new List<string>();
                        // 2932
                        // obter registro de segurança a partir do user.SecurityGuid
                        // método pra carregar a lista abaixo conforme as propriedades de segurança atribuída ao usuário
                        var userSecurity = _security.Find(x => x.Guid == user.SecurityGuid);
                        var properties = _security.Find(x=> x.Name == "ChangePublicPhoneContacts");    
                        
                        var result = properties.Find(x => x.Group.ToString() == "Web" && x.Name.ToUpper() == properties.ToString().ToUpper());

                        /*foreach (var property in properties)
                        {
                            list.Add("ViewOrChangeAccessGroups");
                        }*/

                        string s1 = list.Find(x=> x[0] == 'V');
                        Console.WriteLine("first a " + s1);
                        

                        foreach (string obj in GetClaimsFromSecurityProperties(result.ToString()))
                        {
                            Console.WriteLine(obj);
                            //List<string> views = obj;
                        }                        

                        if (userSecurity != null)
                        {

                            await _mapper.RegisterUserAsync(Guid.NewGuid(), user, Request.UserHostAddress, new[] { result.Name});
                        }

                        //await _mapper.RegisterUserAsync(Guid.NewGuid(), user, Request.UserHostAddress, new[] { "security", "access-groups", "users", "radio-networks", "consoles", "station-groups", "maps", "phone-patch", "licenses", "integrations", "profile", "groups", "radio-groups", "multimedia-files", "tasks", "posts", "telephony", "phone-contacts", "csta-phone-extensions" }); 

                        await _authService.CompleteAuthenticationAsync(Shared.Enums.SessionType.Web, true, user).ConfigureAwait(false);

                        DateTime? expiry = null;
                        if(login.RememberMe)
                        {
                            expiry = DateTime.Today.AddDays(7);
                        }
                        if (user.MustChangePassword)
                        {
                            return this.LoginAndRedirect(user.Guid, expiry, "~/web/password/");
                        }
                        else
                        {
                            return this.LoginAndRedirect(user.Guid, expiry, "~/web/monitor");
                        }
                    }
                    catch (TreatedException e)
                    {
                        _logger.LogError(e);

                        var message = HttpUtility.UrlEncode(e.Message, Encoding.UTF8);
                        if (user != null)
                          await _authService.CompleteAuthenticationAsync(Shared.Enums.SessionType.Web, false, user);

                        return Response.AsRedirect($"/web/login?error=invalid&message={message}");
                    }
                    catch (Exception e)
                    {
                        _logger.LogError(e);

                        if (user != null)
                            await _authService.CompleteAuthenticationAsync(Shared.Enums.SessionType.Web, false, user);
                        return Response.AsRedirect("/web/login?error=invalid");
                    }
                }
                catch (Exception e)
                {
                    _logger.LogError(e);
                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.InternalServerError).WithReasonPhrase(WebResources.Error_FailureLoggingIn);
                }
            };

            Post["web/ping"] = _ =>
            {
                if (Context.CurrentUser is UserIdentity identity)
                    _userSessionService.UpdateLastAccessByUser(identity.Guid, DateTime.Now);

                return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.OK);
            };
        }

        private string GetSystemVersion()
        {
            var version = GetType().Assembly.GetName().Version.ToString();
            version = version.TrimEnd('.', '0');

            if (!version.Contains("."))
                version += ".0";

            return version;
        }

        public List<string> GetClaimsFromSecurityProperties(string properties)
        {
            List<string> result = new List<string>();
            foreach (var property in properties)
            {
                switch (property.ToString())
                {
                    case "ViewOrChangeAccessGroups":
                        result.Add("ViewOrChangeAccessGroups");
                        break;
                    case "ViewOrChangeRadioNetworks":
                        result.Add("ViewOrChangeAccessGroups");
                        break;                     
                }              
            }
            return (result);
        }

        static bool Test(string s)
        {
            return s[0] == 'V';
        }


    }
}


      Get["/api/users/{id}/security-properties"] = parameters =>
            {

            };
   await _service.AddAsync(SecurityModelToDbSecurityModel(model));
    return Negotiate.WithModel(model).WithStatusCode(HttpStatusCode.OK);
	
	
	
	
	private readonly ISecurityService _service; criar um private do tipo user
	
	
	user modules
	
	
            Get["/api/users/{id}"] = parameters =>
            {
                try
                {
                    var user = _usersService.Find(x => x.Guid == new Guid(parameters.id));
                    var security = _securityRepository.Find(x => x.Guid == user.SecurityGuid);
                    var accessGroup = _accessGroupRepository.Find(x => x.Guid == user.AccessGroupGuid);
                    var userResponse = new UserModel(user, security, accessGroup);
                    return Response.AsJson(userResponse);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);
                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUsers };
                }
            };
-=================
//var result = properties.Find(x => x.Group.ToString().ToUpper() == parameters.group.ToString().ToUpper() && x.Name.ToUpper() == parameters.name.ToString().ToUpper());
                        /*
            Get["/api/users/{id}"] = parameters =>            
             {
                try
                {
                    var user = _usersService.Find(x => x.Guid == new Guid(parameters.id));
                    var security = _securityRepository.Find(x => x.Guid == user.SecurityGuid);
                    var accessGroup = _accessGroupRepository.Find(x => x.Guid == user.AccessGroupGuid);
                    var cstaProfile = _cstaProfileRepository.Find(x => x.Guid == user.CstaProfileGuid);
                    var userResponse = new UserModel(user, security, accessGroup, cstaProfile);
                    return Response.AsJson(userResponse);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);
                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUsers };
                }
            };
                         */
