using Nancy;
using Nancy.ModelBinding;
using Nancy.Security;
using Nancy.Validation;
using Remota.Shared.Services;
using Remota.WebConfig.Models;
using System;
using System.Collections.Generic;
using dbModels = Remota.Server.Database.Models;
using Remota.WebConfig.Resources;
using Remota.Services.Shared.Domain.Console.Services.Interfaces;
using dbConsoleModels = Remota.Server.Database.Models.Console;
using dbPhoneModels = Remota.Server.Database.Models.Phone;
using dbPostModels = Remota.Server.Database.Models.Post;
using ConsoleAggregates = Remota.Services.Shared.Application.Console.Aggregates;
using System.Linq;
using Remota.Server.Database.Database;

namespace Remota.WebConfig.Modules
{
    public class CstaProfilesModule : NancyModule
    {
        private readonly ILoggerService _logger;
        private readonly ICstaProfilesService _service;

        public CstaProfilesModule(ILoggerService logger, ICstaProfilesService service)
        {
            _logger = logger;
            _service = service;

            this.RequiresAuthentication();

            Get["/web/cstaProfile"] = _ =>
            {
                return View["CstaProfiles.cshtml", new CstaProfileResponseModel(_service.GetAll())];
            };

            Get["/api/cstaProfile"] = _ =>
            {
                try
                {
                    var cstaProfiles = _service.GetAll();
                    var result = new List<object>();

                    foreach (var console in cstaProfiles)
                    {
                        dynamic resultCstaProfile = new
                        {
                            guid = console.Guid,
                            alias = console.Alias
                        };

                        result.Add(resultCstaProfile);
                    }

                    return Response.AsJson(result);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingCstaProfiles };
                }
            };

            Get["/api/cstaProfileExtensions/{cstaProfileGuid:guid}"] = parameters =>
            {
                try
                {
                    var cstaProfileGuid = (Guid)parameters.cstaProfileGuid;

                    var cstaProfile = _service.GetCstaProfileExtensions(cstaProfileGuid);
                    var result = new List<object>();

                    foreach (var CstaProfileExtensions in CstaProfileExtension)
                    {
                        dynamic resultCstaProfileExtensions = new
                        {
                            guid = CstaProfileExtensions.Guid,
                            profileGuid = CstaProfileExtensions.ProfileGuid,
                            extensionGuid = CstaProfileExtensions.ExtensionGuid
                        };

                        result.Add(CstaProfileExtensions);
                    }

                    return Response.AsJson(result);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingAccessGroups };
                }
            };

            Post["/api/cstaProfile/update", true] = async (_, __) =>
            {
                try
                {
                    var model  = this.Bind<CstaProfileModel>();
                    var result = this.Validate(model);
                    var item   = this.Validate(this.Bind<CstaProfileExtensionModel>());
                    
                    if (result.IsValid)
                    {
                        var profile = new dbModels.CstaProfiles.CstaProfileModel();
                        profile.Alias = model.Alias;

                        var extensions = new List<dbModels.CstaProfileExtensions.CstaProfileExtensionModel>();

                        foreach (var cstaProfileExtension in model.CstaProfileExtensions)
                        {                            
                            if (!item.IsValid)
                                break;

                            var extension = new dbModels.CstaProfileExtensions.CstaProfileExtensionModel();
                            extension.ProfileGuid = (Guid)model.Guid;
                            extension.ExtensionGuid = cstaProfileExtension.ExtensionGuid;
                            extensions.Add(extension);
                        }

                        await _service.UpdateAsync(profile, extensions.ToArray());
                    }

                    else
                    {
                        return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(WebResources.Error_FailureValidatingItem);
                    }
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureSavingConsole };
                }
            };

            Post["/api/cstaProfile/delete", true] = async (_, __) =>
            {
                try
                {
                    foreach (var record in this.Bind<IEnumerable<CstaProfileModel>>())
                    {
                        var result = this.Validate(record);
                        if (result.IsValid)
                        {
                            await _service.DeleteAsyncCstaProfileModelToDbCstaProfileModel(record));
                        }
                        else
                        {
                            return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest);
                        }
                    }

                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.OK);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return Negotiate.WithStatusCode(HttpStatusCode.InternalServerError).WithReasonPhrase(WebResources.Error_FailureDeletingConsole);
                }
            };
        }

        private .CstaProfileModel CstaProfileModelToDbCstaProfileModel(CstaProfileModel model)
        {
            return new dbCstaProfileModels.CstaProfileModel
            {
                Guid = model.Guid ?? Guid.Empty,
                Alias = model.Alias
            };
        }

        private dbCstaProfileModels.ConsoleAccessGroupModel AccessGroupModelToDbAccessGroupModel(ConsoleAccessGroupModel model)
        {
            return new dbConsoleModels.ConsoleAccessGroupModel
            {
                Guid = model.Guid,
                ConsoleGuid = model.ConsoleGuid,
                AccessGroupGuid = model.AccessGroupGuid
            };
        }

        private dbPhoneModels.PhoneAccountModel PhoneModelToDbPhoneModel(PhoneAccountModel model)
        {
            return new dbPhoneModels.PhoneAccountModel
            {
                Guid = model.Guid,
                ConsoleGuid = model.ConsoleGuid,
                AccountIndex = model.AccountIndex,
                Alias = model.Alias,
                AccountName = model.AccountName,
                DisplayName = model.DisplayName,
                DomainName = model.DomainName,
                UserName = model.UserName,
                Password = model.Password,
                Port = model.Port,
                Protocol = model.Protocol,
                ProxyAddress = model.ProxyAddress,
                DtmfMode = model.DtmfMode,
                OutgoingEnabled = model.OutgoingEnabled,
                OutgoingPriority = model.OutgoingPriority,
                EchoCancellation = model.EchoCancellation,
                AutoGain = model.AutoGain,
                NoiseReduction = model.NoiseReduction,
                Codecs = model.Codecs,
                ExpirationTime = model.ExpirationTime,
                KeepAliveMode = model.KeepAliveMode,
                KeepAliveInterval = model.KeepAliveInterval,
                RegistrationRequired = model.RegistrationRequired,
                TransferMode = model.TransferMode,
                AutomaticallyDetectNAT = model.AutomaticallyDetectNAT,
                SrtpMode = model.SrtpMode,
                NatTraversal = model.NatTraversal,
                StunServer = model.StunServer
            };
        }

        private dbPostModels.PostAccountModel PostModelToDbPostModel(PostAccountModel model)
        {
            return new dbPostModels.PostAccountModel
            {
                Guid = model.Guid,
                ConsoleGuid = model.ConsoleGuid,
                Alias = model.Alias,
                Abbreviation = model.Abbreviation,
                AccountName = model.AccountName,
                DisplayName = model.DisplayName,
                DomainName = model.DomainName,
                UserName = model.UserName,
                Password = model.Password,
                Port = model.Port,
                Protocol = model.Protocol,
                ProxyAddress = model.ProxyAddress,
                DtmfMode = model.DtmfMode,
                PttEnabled = model.PttEnabled,
                EchoCancellation = model.EchoCancellation,
                AutoGain = model.AutoGain,
                NoiseReduction = model.NoiseReduction,
                Codecs = model.Codecs,
                ExpirationTime = model.ExpirationTime,
                KeepAliveMode = model.KeepAliveMode,
                KeepAliveInterval = model.KeepAliveInterval,
                RegistrationRequired = model.RegistrationRequired
            };
        }
    }
}