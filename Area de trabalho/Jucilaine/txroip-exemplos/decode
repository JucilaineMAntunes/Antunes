
using Nancy;
using Nancy.ModelBinding;
using Nancy.Security;
using Nancy.Validation;
using Remota.Services.Shared.Domain.PhonePatch.Services.Interfaces;
using Remota.Shared.Services;
using Remota.WebConfig.Models;
using System;
using System.Collections.Generic;
using dbModels = Remota.Server.Database.Models;
using System.Linq;
using System.Web;
using Remota.Shared.Enums;
using Remota.Shared.Helpers;
using Remota.WebConfig.Resources;
using Remota.Services.Shared.Domain.PhoneContacts.Services.Interfaces;
using Remota.Server.Database.Models.PhoneContacts;

namespace Remota.WebConfig.Modules
{
    public class PhoneContactsModule : NancyModule
    {
        private readonly ILoggerService _logger;
        private readonly IPhoneContactsService _service;

        public PhoneContactsModule(ILoggerService logger, IPhoneContactsService service)
        {
            _logger = logger;
            _service = service;

            this.RequiresAuthentication();

            Get["/web/phone-contacts"] = _ =>
            {
                return View["PhoneContacts.cshtml", new PhoneContactsResponseModel(_service.GetAll())];
            };

            Get["/api/phone-contacts"] = _ =>
            {
                try
                {
                    var phoneContacts = _service.GetAll();
                    var result = new List<object>();

                    foreach (var item in phoneContacts)
                    {
                        result.Add(new
                        {
                            guid = item.Guid,
                            privateUserGuid = item.PrivateUserGuid,
                            name = item.Name,
                            homenumber = item.HomeNumber,
                            cellphonenumber = item.CellPhoneNumber,
                            businessnumber = item.BusinessNumber,
                            faxnumber = item.FaxNumber,
                            extensionline = item.ExtensionLine,
                            email = item.Email,
                            address = item.Address,
                            moreinfo = item.MoreInfo
                        });
                    }

                    return Response.AsJson(result);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingPhoneContacts };
                }
            };

            #region [ Select options routes ]

            Get["/api/users/current-user-guid"] = _ =>
            {
                try
                {
                    var result = new List<object>();

                    foreach (var item in EnumHelper.GetValues<PhoneAccountKeepAliveMode>())
                    {
                        result.Add(new
                        {
                            mode = item.ToString()
                        });
                    }

                    return Response.AsJson(result);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingPhoneContacts }; ///Error_FailureObtainingPhoneContactsKeepAliveModes juci ver nome correto
                }
            };


            #endregion


            Post["/api/phone-contacts/add", true] = async (_, __) =>
            {
                try
                {
                    var model = (this).Bind<Models.PhoneContactModel>();


                    if (Context.CurrentUser is UserIdentity userIdentity)
                        if (model.CheckPrivate)
                            model.PrivateUserGuid = userIdentity.Guid;

                    var result = this.Validate(model);
                    if (result.IsValid)
                    {
                        await _service.AddAsync(PhoneContactsModelToDbPhoneContactsModel(model));
                        return Negotiate.WithModel(model).WithStatusCode(HttpStatusCode.OK);
                    }
                    else
                    {
                        return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(Resources.WebResources.Error_FailureValidatingItem);
                    }

                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = Resources.WebResources.Error_FailureSavingPhoneContacts };
                }
            };

            Post["/api/phone-contacts/update", true] = async (_, __) =>
            {
                try
                {
                    var model = (this).Bind<Models.PhoneContactModel>();
                    var result = this.Validate(model);
                    if (result.IsValid)
                    {
                        await _service.UpdateAsync(PhoneContactsModelToDbPhoneContactsModel(model));
                        return Negotiate.WithModel(model).WithStatusCode(HttpStatusCode.OK);
                    }
                    else
                    {
                        return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(Resources.WebResources.Error_FailureValidatingItem);
                    }

                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = Resources.WebResources.Error_FailureSavingPhoneContacts };
                }
            };

            Post["/api/phone-contacts/delete", true] = async (_, __) =>
            {
                try
                {
                    foreach (var record in (this).Bind<IEnumerable<Models.PhoneContactModel>>())
                    {
                        var result = (this).Validate(record);
                        if (result.IsValid)
                        {
                            await _service.DeleteAsync(PhoneContactsModelToDbPhoneContactsModel(record));
                        }
                        else
                        {
                            return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest);
                        }
                    }
                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.OK);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = Resources.WebResources.Error_FailureDeletingPhoneContacts };
                }
            };
        }

        private dbModels.PhoneContacts.PhoneContactModel PhoneContactsModelToDbPhoneContactsModel(Models.PhoneContactModel model)
        {
            return new dbModels.PhoneContacts.PhoneContactModel()
            {
                Guid = model.Guid ?? Guid.Empty,
                PrivateUserGuid = model.PrivateUserGuid,
                Name = model.Name,
                HomeNumber = model.HomeNumber,
                CellPhoneNumber = model.CellPhoneNumber,
                BusinessNumber = model.BusinessNumber,
                FaxNumber = model.FaxNumber,
                ExtensionLine = model.ExtensionLine,
                Email = model.Email,
                Address = model.Address,
                MoreInfo = model.MoreInfo



            };
        }

    }
}