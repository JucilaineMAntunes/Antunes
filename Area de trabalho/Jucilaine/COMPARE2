namespace App {
    let saveFsiRepeaterClicked = false;
    let channelList: RoipChannel[] = [];
    let selectedChannel = -1;
    let statusList: RoipStatus[] = [];
    let selectedStatus = -1;

    interface RoipChannel {
        guid: string;
        id: number;
        alias: string;
    }

    interface RoipStatus {
        guid: string;
        id: number;
        alias: string;
    }

    $(function () {
        $('#addFsiRepeater').on('click', function (event, data) {
            var serviceGuid = (<any>$).getSelectedNodeGuid();

            $.ajax('/api/fsi-repeater/add/' + serviceGuid, {
                method: 'GET',
                contentType: 'application/json',
                success: function (data) {
                    $('#fsiRepeaterForm').prop('action', '/api/fsi-repeater/add').find('.invalid-feedback, .alert').hide();
                    loadData(data);
                    loadChannelList(data.channels);
                    loadStatusList(data.status.statusList);

                    let label = $('#fsiRepeaterModalLabel');
                    label.text(label.data('label-add'));

                    $('.nav-tabs a[href="#fsiRepeaterGeneral-panel"]').tab('show');
                    $('#fsiRepeaterModal').modal('show');
                }
            });
        });

        $('#btnSaveFsiRepeater').on('click', function () {
            $('.invalid-feedback').hide();
            $('#fsiRepeaterModal').modal('hide');

            saveFsiRepeaterClicked = true;
        });

        $('#fsiRepeaterModal').on('hidden.bs.modal', function () {
            if (saveFsiRepeaterClicked) {
                blockUI();
                saveFsiRepeater();
                saveFsiRepeaterClicked = false;
            }
        });

        $('#fsiRepeater_repeaterType').on('click', function () {
            updateRepeaterControls();
        });

        $('#fsi-add-channel').on('click', function () {
            if ($('#fsi-add-channel').hasClass('disabled'))
                return false;

            if (selectedChannel >= 0)
                saveCurrentChannel();

            let channel: RoipChannel = {
                guid: '00000000-0000-0000-0000-000000000000',
                id: 0,
                alias: ''
            } as any;
            channelList.push(channel);

            selectedChannel = channelList.length - 1;
            updateChannelList();
        });

        $('#fsi-add-status').on('click', function () {
            if ($('#fsi-add-status').hasClass('disabled'))
                return false;

            if (selectedStatus >= 0)
                saveCurrentStatus();

            let status: RoipStatus = {
                guid: '00000000-0000-0000-0000-000000000000',
                id: 0,
                alias: 'Status'
            } as any;
            statusList.push(status);

            selectedStatus = statusList.length - 1;
            updateStatusList();
        });

        $(document).on('click', '.fsi-remove-channel-icon', function (e) {
            $(this).attr('data-removed', 'true');

            if (selectedChannel > 0)
                saveCurrentChannel();

            let index = parseInt(<any>$(this).attr('data-account-index'), 10);
            let currentIndex = 0;

            channelList = jQuery.grep(channelList, function (value) {
                return currentIndex++ != index;
            });

            if (selectedChannel == currentIndex || selectedChannel >= channelList.length)
                selectedChannel = channelList.length - 1;

            updateChannelList();
        });

        $(document).on('click', '.fsi-remove-status-icon', function (e) {
            $(this).attr('data-removed', 'true');

            if (selectedStatus > 0)
                saveCurrentStatus();

            let index = parseInt(<any>$(this).attr('data-account-index'), 10);
            let currentIndex = 0;

            statusList = jQuery.grep(statusList, function (value) {
                return currentIndex++ != index;
            });

            if (selectedStatus == currentIndex || selectedStatus >= statusList.length)
                selectedStatus = statusList.length - 1;

            updateStatusList();
        });

        $(document).on('click', '#fsiChannelListGroups .nav-link', function (e) {
            if ($(this).find('.fsi-remove-channel-icon').attr('data-removed') == 'true')
                return;

            let index = parseInt(<any>$(this).find('.fsi-remove-channel-icon').attr('data-account-index'), 10);

            if (selectedChannel >= 0)
                saveCurrentChannel();

            selectedChannel = index;
            loadCurrentChannel();
        });

        $(document).on('click', '#fsiStatusListGroups .nav-link', function (e) {
            if ($(this).find('.fsi-remove-status-icon').attr('data-removed') == 'true')
                return;

            let index = parseInt(<any>$(this).find('.fsi-remove-status-icon').attr('data-account-index'), 10);

            if (selectedStatus >= 0)
                saveCurrentStatus();

            selectedStatus = index;
            loadCurrentStatus();
        });

        $(document).on('change', '#fsiServiceChannel_alias', function () {
            if (selectedChannel < 0)
                return;

            let newValue = $(this).val() as any;

            $('#fsiChannelListGroups .nav-link').each(function () {
                if (<any>$(this).find('.fsi-remove-channel-icon').attr('data-account-index') == selectedChannel) {
                    $(this).find('span').text(newValue);
                }
            });
        });

        $(document).on('change', '#fsiServiceStatus_alias', function () {
            if (selectedStatus < 0)
                return;

            let newValue = $(this).val() as any;

            $('#fsiStatusListGroups .nav-link').each(function () {
                if (<any>$(this).find('.fsi-remove-status-icon').attr('data-account-index') == selectedStatus) {
                    $(this).find('span').text(newValue);
                }
            });
        });

        function updateChannelList() {
            $('#fsiChannelListGroups').find('.nav-link').remove();

            let index = 0;

            channelList.forEach(function (item) {
                let strElement = "<a class=\"nav-link show\" data-toggle=\"pill\" href=\"#\"><span>" + item.alias + "</span> <div class='fsi-remove-channel-button px-1'><i data-account-index=\"" + (index++) + "\" class=\"fsi-remove-channel-icon fa fa-times\"></i></div></a>";
                let domElement = $(strElement);

                domElement.insertAfter($('#fsi-add-channel'));

                if (index - 1 == selectedChannel)
                    domElement.addClass('active');
            });

            loadCurrentChannel();
        }

        function updateStatusList() {
            $('#fsiStatusListGroups').find('.nav-link').remove();

            let index = 0;

            statusList.forEach(function (item) {
                let strElement = "<a class=\"nav-link show\" data-toggle=\"pill\" href=\"#\"><span>" + item.alias + "</span> <div class='fsi-remove-status-button px-1'><i data-account-index=\"" + (index++) + "\" class=\"fsi-remove-status-icon fa fa-times\"></i></div></a>";
                let domElement = $(strElement);

                domElement.insertAfter($('#fsi-add-status'));

                if (index - 1 == selectedStatus)
                    domElement.addClass('active');
            });

            loadCurrentStatus();
        }

        function loadCurrentChannel() {
            if (selectedChannel >= 0) {
                let channel = channelList[selectedChannel];

                $('#fsiServiceChannel_guid').val(channel.guid);
                $('#fsiServiceChannel_id').val(channel.id);
                $('#fsiServiceChannel_alias').val(channel.alias);
            }

            if (channelList.length == 0 || selectedChannel < 0)
                $('#fsiChannelListTabsPanel').hide();
            else
                $('#fsiChannelListTabsPanel').show();
        }

        function loadCurrentStatus() {
            if (selectedStatus >= 0) {
                let status = statusList[selectedStatus];

                $('#fsiServiceStatus_guid').val(status.guid);
                $('#fsiServiceStatus_id').val(status.id);
                $('#fsiServiceStatus_alias').val(status.alias);
            }

            if (statusList.length == 0 || selectedStatus < 0)
                $('#fsiStatusListTabsPanel').hide();
            else
                $('#fsiStatusListTabsPanel').show();
        }

        function saveCurrentChannel() {
            if (selectedChannel < 0)
                return;

            let channel: RoipChannel = {
                guid: $('#fsiServiceChannel_guid').val(),
                id: $('#fsiServiceChannel_id').val(),
                alias: $('#fsiServiceChannel_alias').val()
            } as any;
            channelList[selectedChannel] = channel;
        }

        function saveCurrentStatus() {
            if (selectedStatus < 0)
                return;

            let status: RoipStatus = {
                guid: $('#fsiServiceStatus_guid').val(),
                id: $('#fsiServiceStatus_id').val(),
                alias: $('#fsiServiceStatus_alias').val()
            } as any;
            statusList[selectedStatus] = status;
        }

        function updateRepeaterControls() {
            var repeaterType = $('#fsiRepeater_repeaterType').val();

            if (repeaterType == 'Digital') {
                $('#fsiRepeaterForm .repeaterAnalog').hide();
                $('#fsiRepeaterForm .repeaterDigital').show();
                $('#fsiRepeaterChanelList-tab').show();
                $('#fsiRepeaterStatusList-tab').show();
            } else if (repeaterType == 'Analog') {
                $('#fsiRepeaterForm .repeaterDigital').hide();
                $('#fsiRepeaterForm .repeaterAnalog').show();
                $('#fsiRepeaterChanelList-tab').show();
                $('#fsiRepeaterStatusList-tab').show();
            }
        }

        function loadData(data) {
            $('#fsiRepeaterForm :input').val("");

            $('#fsiRepeater_guid').val(data.guid);
            $('#fsiRepeater_serviceGuid').val(data.serviceGuid);
            $('#fsiRepeater_serviceAlias').val(data.serviceAlias);
            $('#fsiRepeater_active').prop('checked', data.active);
            $('#fsiRepeater_Alias').val(data.fsiRepeater_Alias);
            $('#fsiRepeater_Abbreviation').val(data.fsiRepeater_Abbreviation);
            $('#fsiRepeater_repeaterType').val(data.repeaterType);
            $('#fsiRepeater_hostName').val(data.hostName);
            $('#fsiRepeater_voiceControl').prop('checked', data.voiceControl);
            $('#fsiRepeater_model').val(data.model);
            $('#fsiRepeater_firmwareVersion').val(data.firmwareVersion);
            $('#fsiRepeater_serialNumber').val(data.serialNumber);

            // General Settings
            $('#fsiRepeater_Id').val(data.settings.generalSetting.fsiRepeater_Id);

            // Network
            $('#fsiRepeater_ControlPort').val(data.settings.networkService.fsiRepeater_ControlPort);
            $('#fsiRepeater_VoicePort').val(data.settings.networkService.fsiRepeater_VoicePort);
            $('#fsiRepeater_DataPort').val(data.settings.networkService.fsiRepeater_DataPort);
            $('#fsiRepeater_UdpMinPort').val(data.settings.networkService.fsiRepeater_UdpMinPort);
            $('#fsiRepeater_UdpMaxPort').val(data.settings.networkService.fsiRepeater_UdpMaxPort);

            // Voice Service
            $('#fsiRepeater_Nac').val(data.settings.voiceService.fsiRepeater_Nac);
            $('#fsiRepeater_TalkgroupId').val(data.settings.voiceService.fsiRepeater_TalkgroupId);
            $('#fsiRepeater_ReceptionGain').val(data.settings.voiceService.fsiRepeater_ReceptionGain);
            $('#fsiRepeater_TransmissionGain').val(data.settings.voiceService.fsiRepeater_TransmissionGain);

            // Default Status
            $('#fsiServiceStatus_powerOn').val(data.status.powerOnStatus);
            $('#fsiServiceStatus_powerOff').val(data.status.powerOffStatus);

            updateRepeaterControls();
        }

        function loadChannelList(items) {
            channelList = [];
            selectedChannel = -1;

            items.forEach(function (item) {
                channelList.push(item);
            });
            if (channelList.length > 0)
                selectedChannel = 0;

            updateChannelList();
        }

        function loadStatusList(items) {
            statusList = [];
            selectedStatus = -1;

            items.forEach(function (item) {
                statusList.push(item);
            });
            if (statusList.length > 0)
                selectedStatus = 0;

            updateStatusList();
        }

        function saveFsiRepeater() {
            if (selectedChannel >= 0)
                saveCurrentChannel();

            if (selectedStatus >= 0)
                saveCurrentStatus();

            let data = JSON.stringify({
                guid: $('#fsiRepeater_guid').val(),
                serviceGuid: $('#fsiRepeater_serviceGuid').val(),
                active: $('#fsiRepeater_active').prop('checked'),
                fsiRepeater_Alias: $('#fsiRepeater_Alias').val(),
                fsiRepeater_Abbreviation: $('#fsiRepeater_Abbreviation').val(),
                repeaterType: $('#fsiRepeater_repeaterType').val(),
                hostName: $('#fsiRepeater_hostName').val(),
                voiceControl: $('#fsiRepeater_voiceControl').prop('checked'),
                model: $('#fsiRepeater_model').val(),
                firmwareVersion: $('#fsiRepeater_firmwareVersion').val(),
                serialNumber: $('#fsiRepeater_serialNumber').val(),
                settings: {
                    generalSetting: {
                        fsiRepeater_Id: $('#fsiRepeater_Id').val()
                    },
                    networkService: {
                        fsiRepeater_ControlPort: $('#fsiRepeater_ControlPort').val(),
                        fsiRepeater_VoicePort: $('#fsiRepeater_VoicePort').val(),
                        fsiRepeater_DataPort: $('#fsiRepeater_DataPort').val(),
                        fsiRepeater_UdpMinPort: $('#fsiRepeater_UdpMinPort').val(),
                        fsiRepeater_UdpMaxPort: $('#fsiRepeater_UdpMaxPort').val()
                    },
                    voiceService: {
                        fsiRepeater_Nac: $('#fsiRepeater_Nac').val(),
                        fsiRepeater_TalkgroupId: $('#fsiRepeater_TalkgroupId').val(),
                        fsiRepeater_ReceptionGain: $('#fsiRepeater_ReceptionGain').val(),
                        fsiRepeater_TransmissionGain: $('#fsiRepeater_TransmissionGain').val()
                    }
                },
                channels: channelList,
                status: {
                    powerOnStatus: $('#fsiServiceStatus_powerOn').val(),
                    powerOffStatus: $('#fsiServiceStatus_powerOff').val(),
                    statusList: statusList
                }
            });

            $.ajax($('#fsiRepeaterForm').prop('action'), {
                method: 'POST',
                contentType: 'application/json',
                data: data
            }).then((<any>$).reloadTreeView, function (result) {
                $('#fsiRepeaterModal').modal('show');
                unblockUI();
                let errors = result.responseJSON.errors || [];
                let msg: string | null = result.statusText || null;
                for (let field in errors) {
                    $(`#${field} ~ .invalid-feedback`).show().html(errors[field].map(x => x.errorMessage).join('<br/>'));
                }

                if (msg) {
                    $('#fsiRepeaterModal .alert').show().text(msg);
                };
            });
        }

        (<any>$).changeFsiRepeater = (guid) => {
            blockUI();

            $.ajax('/api/fsi-repeater/' + guid, {
                method: 'GET',
                contentType: 'application/json',
                success: function (data) {
                    $('#fsiRepeaterForm').prop('action', '/api/fsi-repeater/update').find('.invalid-feedback, .alert').hide();
                    loadData(data);
                    loadChannelList(data.channels);
                    loadStatusList(data.status.statusList);

                    let label = $('#fsiRepeaterModalLabel');
                    label.text(label.data('label-change'));
                    $('#btnSaveFsiRepeater').prop("disabled", true);

                    $('.nav-tabs a[href="#fsiRepeaterGeneral-panel"]').tab('show');
                    $('#fsiRepeaterModal').modal('show');

                    unblockUI();
                }
            });
        };

        (<any>$).deleteFsiRepeater = (guid) => {
            blockUI();

            let data = JSON.stringify({
                guid: guid
            });
            $.ajax('/api/fsi-repeater/delete', {
                method: 'POST',
                contentType: 'application/json',
                data: data,
                error: function (result) {
                    unblockUI();

                    let msg: string | null = result.statusText || null;
                    let errors = result.responseJSON.errors || [];
                    console.log(errors);
                    console.log(result);
                    if (msg) {
                        msg += "<br /><br />";
                        for (let error in errors) {
                            msg += errors[error].map(x => x.errorMessage);
                            msg += "<br/>";
                        }
                        $('#confirmModal').modal('hide');
                        $('#errorText').html(msg);
                        $('#errorModal').modal('show');
                    }
                }
            }).then((<any>$).reloadTreeView);
        }

        function enableFsiRepeaterButtons(event) {
            if (event.keyCode !== 9) {
                $('#btnSaveFsiRepeater').prop('disabled', false);
            }
        }

        $('#fsiRepeaterForm :input').change(enableFsiRepeaterButtons);
        $('#fsiRepeaterForm :input').keyup(enableFsiRepeaterButtons);
    });
}