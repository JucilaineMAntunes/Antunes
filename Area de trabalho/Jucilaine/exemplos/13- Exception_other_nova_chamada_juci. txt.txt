https://github.com/acenelio/exceptions2-csharp/blob/master/Course/Program.cs

using System;
using System.Globalization;
using Course7.Entities;
using Course7.Entities.Exceptions;

namespace Course7
{
    class Program
    {
        static void Main(string[] args)
        {

            
                Console.WriteLine("Enter account data: ");
                Console.Write("Number: ");
                int number = int.Parse(Console.ReadLine());
                Console.Write("Holder: ");
                string holder = Console.ReadLine();

                Console.Write("Initial balance: ");
                double balance = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);

                Console.Write("Withdraw limit: ");
                double withdraw = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);

                Account account = new Account(number, holder, balance, withdraw);

            try
            {


                Console.WriteLine("");
                Console.Write("Enter amount for withdraw: ");
                double amount = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);
           
                account.Withdraw(amount);
                Console.WriteLine(account);

            }           
            catch (DomainException e)
            {
                Console.WriteLine("Withdraw error:   " + e.Message);
            }

            catch (Exception e)
            {
                Console.WriteLine("Unexpected error: " + e.Message);
            }

        }
    }
}

====================================Account===================================


using Course7.Entities.Exceptions;
using System.Globalization;

namespace Course7.Entities
{
    class Account
    {

        public int Number { get; set; }
        public string Holder { get; set; }
        public double Balance { get; set; }

        public double WidthDrawLimit { get; set; }

        public Account()
        {

        }

        public Account(int number, string holder, double balance, double widthDrawLimit)
        {

            Number = number;
            Holder = holder;
            Balance = balance;
            WidthDrawLimit = widthDrawLimit;
        }

        public void Deposit(double amount)
        {
            Balance += amount;            
        }

        public void Withdraw(double amount)
        {

            if (amount > WidthDrawLimit)
            {
                throw new DomainException("The amount exceeds withdraw limit");
            }

            if (amount > Balance)
            {
                throw new DomainException("Not enough balance");
            }
            

            Balance -= amount;
        }

        public override string ToString()
        {
            return "New Balance: "
                + Balance.ToString("F2", CultureInfo.InvariantCulture);
        }
    }
}
==================DomainException ========================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Course7.Entities.Exceptions
{
    class DomainException : ApplicationException
    {

        public DomainException(string message) : base(message)
        {

        }
    }
}
