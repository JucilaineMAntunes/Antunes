
https://github.com/acenelio/inheritance7-csharp/blob/master/Course/Entities/Enums/Color.cs


using System;

using System.Collections.Generic;

using System.Globalization;

using Course.Entities;

using Course.Entities.Enums;



namespace Course

{

    class Program

    {

        static void Main(string[] args)

        {

            List<Shape> list = new List<Shape>();



            Console.Write("Enter the number of shapes: ");

            int n = int.Parse(Console.ReadLine());



            for (int i = 1; i <= n; i++)

            {

                Console.WriteLine($"Shape #{i} data:");

                Console.Write("Rectangle or Circle (r/c)? ");

                char ch = char.Parse(Console.ReadLine());

                Console.Write("Color (Black/Blue/Red): ");

                Color color = Enum.Parse<Color>(Console.ReadLine());

                if (ch == 'r')

                {

                    Console.Write("Width: ");

                    double width = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);

                    Console.Write("Height: ");

                    double height = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);

                    list.Add(new Rectangle(width, height, color));

                }

                else

                {

                    Console.Write("Radius: ");

                    double radius = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);

                    list.Add(new Circle(radius, color));

                }

            }



            Console.WriteLine();

            Console.WriteLine("SHAPE AREAS:");

            foreach (Shape shape in list)

            {

                Console.WriteLine(shape.Area().ToString("F2", CultureInfo.InvariantCulture));

            }

        }

    }

}




=================================Rectangle.cs==============================
using Course.Entities.Enums;



namespace Course.Entities

{

    class Rectangle : Shape

    {

        public double Width { get; set; }

        public double Height { get; set; }



        public Rectangle(double width, double height, Color color) : base(color)

        {

            Width = width;

            Height = height;

        }



        public override double Area()

        {

            return Width * Height;

        }

    }

}
============================Circle.cs===========================================
using System;

using Course.Entities.Enums;



namespace Course.Entities

{

    class Circle : Shape

    {

        public double Radius { get; set; }



        public Circle(double radius, Color color) : base(color)

        {

            Radius = radius;

        }



        public override double Area()

        {

            return Math.PI * Radius * Radius;

        }

    }

}
================================= Shape======================================

using Course.Entities.Enums;



namespace Course.Entities

{

    abstract class Shape

    {

        public Color Color { get; set; }



        protected Shape(Color color)

        {

            Color = color;

        }



        public abstract double Area();

    }

}
==============================Course.Entities.Enums=========================================

inheritance7-csharp/Course/Entities/Enums/Color.cs

namespace Course.Entities.Enums

{

    enum Color

    {

        Black,

        Blue,

        Red

    }

}