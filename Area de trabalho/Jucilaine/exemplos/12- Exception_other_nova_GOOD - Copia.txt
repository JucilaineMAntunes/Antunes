https://github.com/acenelio/exceptions1-csharp/blob/5071db3a59111c34885d50eeef6c764b0e8f93ff/Course/Program.cs


===============================EXEMPLO VERY GOOD======================
================================================================ Program ================================================================
using System;

using Course.Entities;

using Course.Entities.Exceptions;



namespace Course {

    class Program {

        static void Main(string[] args) {



            try {

                Console.Write("Room number: ");

                int number = int.Parse(Console.ReadLine());

                Console.Write("Check-in date (dd/MM/yyyy): ");

                DateTime checkIn = DateTime.Parse(Console.ReadLine());

                Console.Write("Check-out date (dd/MM/yyyy): ");

                DateTime checkOut = DateTime.Parse(Console.ReadLine());



                Reservation reservation = new Reservation(number, checkIn, checkOut);

                Console.WriteLine("Reservation: " + reservation);



                Console.WriteLine();

                Console.WriteLine("Enter data to update the reservation:");

                Console.Write("Check-in date (dd/MM/yyyy): ");

                checkIn = DateTime.Parse(Console.ReadLine());

                Console.Write("Check-out date (dd/MM/yyyy): ");

                checkOut = DateTime.Parse(Console.ReadLine());



                reservation.UpdateDates(checkIn, checkOut);

                Console.WriteLine("Reservation: " + reservation);

            }

            catch (FormatException e) {

                Console.WriteLine("Error in format: " + e.Message);

            }

            catch (DomainException e) {

                Console.WriteLine("Error in reservation: " + e.Message);

            }

            catch (Exception e) {

                Console.WriteLine("Unexpected error: " + e.Message);

            }

        }

    }

}

================================================================ Entities/Reservation.cs ================================================================
using System;

using Course.Entities.Exceptions;



namespace Course.Entities {

    class Reservation {



        public int RoomNumber { get; set; }

        public DateTime CheckIn { get; set; }

        public DateTime CheckOut { get; set; }



        public Reservation() {

        }



        public Reservation(int roomNumber, DateTime checkIn, DateTime checkOut) {



            if (checkOut <= checkIn) {

                throw new DomainException("Check-out date must be after check-in date");

            }



            RoomNumber = roomNumber;

            CheckIn = checkIn;

            CheckOut = checkOut;

        }



        public double Duration() {

            TimeSpan duration = CheckOut.Subtract(CheckIn);

            return (int)duration.TotalDays;

        }



        public void UpdateDates(DateTime checkIn, DateTime checkOut) {



            DateTime now = DateTime.Now;

            if (checkIn < now || checkOut < now) {

                throw new DomainException("Reservation dates for update must be future dates");

            }

            else if (checkOut <= checkIn) {

                throw new DomainException("Check-out date must be after check-in date");

            }



            CheckIn = checkIn;

            CheckOut = checkOut;

        }



        public override string ToString() {

            return "Room "

                + RoomNumber

                + ", check-in: "

                + CheckIn.ToString("dd/MM/yyyy")

                + ", check-out: "

                + CheckOut.ToString("dd/MM/yyyy")

                + ", "

                + Duration()

                + " nights";

        }

    }

}

================================================================ /Entities/Exceptions/DomainException.cs================================================================

using System;



namespace Course.Entities.Exceptions {

    class DomainException : ApplicationException {



        public DomainException(string message) : base(message) {

        }

    }

}


================================================================ Program ================================================================