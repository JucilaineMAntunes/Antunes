@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<Remota.WebConfig.Models.RadioNetworkStatusModel>
@{
    ViewBag.Path = new[] { Text.WebResources.ServerStatus };
    ViewBag.Title = @Text.WebResources.RadioNetworks;
    ViewBag.FormAction = "/web/radio-networks-status";
    Layout = "_Layout.cshtml";
}
@using System.Linq;
@using Remota.WebConfig;
@section Script {
    <script src="~/Content/scripts/radio-networks-status.js" defer></script>
}

<body>

    <div class="row">
        <div class="col">
            <ul>
                @foreach (var group in Model.StationGroups.OrderBy(x => x.Title).Take(10))
                {
                    <li><h1>@group.Title</h1></li>
                    @foreach (var station in group.Stations.OrderBy(x => x.Title).Take(10))
                    {
                        
                        <li>@station.Title</li>
                    }
                }
            </ul>
        </div>
    </div>
	
=============module=========
using Remota.Shared.Services;
using Nancy;
using Remota.WebConfig.Models; 
using Remota.WebConfig.Resources;
using Remota.Services.Shared.Domain.Security.Services.Interfaces;
using Nancy.Security;
using System.Collections.Generic;

namespace Remota.WebConfig.Modules
{
    public class RadioNetworksStatusModule : NancyModule
    {
        private readonly ILoggerService _logger;
        private readonly ISecurityService _securityService;

        public RadioNetworksStatusModule(ILoggerService logger, ISecurityService securityService)
        {
            _logger = logger;
            _securityService = securityService;

            this.RequiresAuthentication();


            Get["/web/radio-networks-status"] = _ =>
            {
                var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ViewOrChangeGroups");
                if (!access)
                    return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };

                var groups = GetDispatchStationGroupModel();

                var model = new RadioNetworkStatusModel(groups);

                return View["RadioNetworksStatus.cshtml", model];                
            };


             Get["/api/radio-networks-status"] = _ =>
             {
                 var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ViewOrChangeGroups");
                 if (!access)
                     return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                
                     List<DispatchStationGroupModel> result = new List<DispatchStationGroupModel>();
                
                     LoadFieldsRadioNetworks(result);
                     
                     return Response.AsJson(result);

             };
        }

        public List<DispatchStationGroupModel> GetDispatchStationGroupModel()
        {

            List<DispatchStationGroupModel> group = new List<DispatchStationGroupModel>();


            List<DispatchStationModel> stations = new List<DispatchStationModel>();

            group.Add(new DispatchStationGroupModel(System.Guid.NewGuid(), "Dispatch 1", "MORRETES",
                         DispatchStationGroupType.Gateway, DispatchStationStatus.Offline , stations
                         ));

            stations.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 1-A",
                   "BASEA",
                   DispatchStationStatus.Online));

            stations.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 1-B",
                   "BASEA",
                   DispatchStationStatus.Online));

            stations.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 1-C",
                   "BASEA",
                   DispatchStationStatus.Online));


            List<DispatchStationModel> stations1 = new List<DispatchStationModel>();

            group.Add(new DispatchStationGroupModel(System.Guid.NewGuid(), "Dispatch 2", "PORTO-DE-GALINHAS",
                         DispatchStationGroupType.Gateway, DispatchStationStatus.Offline, stations1
                         ));

            stations1.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 2-A",
                   "BASEA",
                   DispatchStationStatus.Online));

            stations1.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 2-B",
                   "BASEA",
                   DispatchStationStatus.Online));

            stations1.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 2-C",
                   "BASEA",
                   DispatchStationStatus.Online));

            stations1.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 2-D",
                   "BASEA",
                   DispatchStationStatus.Online));

            return group;

        }

        private void LoadFieldsRadioNetworks(List<DispatchStationGroupModel> items)
        {
            List<DispatchStationGroupModel> group = new List<DispatchStationGroupModel>();
            List<DispatchStationModel> stations = new List<DispatchStationModel>();



            group.Add(new DispatchStationGroupModel(System.Guid.NewGuid(), "Dispatch 1", "MORRETES",
                         DispatchStationGroupType.Gateway, DispatchStationStatus.Offline, stations
                         ));

            stations.Add(new DispatchStationModel(System.Guid.NewGuid(),
                   "Dispatch 1-A",
                   "BASEA",
                   DispatchStationStatus.Online));
      
        }

    }
}

	
=============model=========

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace Remota.WebConfig.Models
{
    public class RadioNetworkStatusModel : BaseResponseModel
    {
        public List<DispatchStationGroupModel> StationGroups { get; set; }

        public RadioNetworkStatusModel(List<DispatchStationGroupModel> groups)
        { 
            StationGroups = groups;
        }
    }

    public class DispatchStationGroupModel
    {
        public Guid Guid { get; set; }
        public string Title { get; set; }
        public string Details { get; set; }
        public DispatchStationGroupType Type { get; set; }
        public DispatchStationStatus Status { get; set; }
        public List<DispatchStationModel> Stations { get; set; }


        public DispatchStationGroupModel(Guid guid, 
                                         string title,
                                         string details,
                                         DispatchStationGroupType type,
                                         DispatchStationStatus status,
                                         List<DispatchStationModel> stations)
        {
            Guid = guid;
            Title = title;
            Details = details;
            Type = type;
            Status = status;
            Stations = stations;
        }
    }
    public class DispatchStationModel
    {
        public Guid Guid { get; set; }
        public string Title { get; set; }
        public string Details { get; set; }
        public DispatchStationStatus Status { get; set; }

        public DispatchStationModel(Guid guid, string title, string details, DispatchStationStatus status)
        {
            Guid = guid;
            Title = title;
            Details = details;
            Status = status;            
        }
    }

    public enum DispatchStationGroupType
    {
        Gateway,
        FSI,
        ICOM,
        COBHAM,
        Radio
    }

    public enum DispatchStationStatus
    {
        Online,
        Offline
    }

}


	
	
	