using Nancy;
using Nancy.ModelBinding;
using Nancy.Security;
using Nancy.Validation;
using Remota.Network;
using Remota.Resources.Generic.Server;
using Remota.Services.Shared.Domain.Security.Services.Interfaces;
using Remota.Services.Shared.Domain.Users.Services.Interfaces;
using Remota.Services.Shared.Infrastructure.Images;
using Remota.Services.Shared.Infrastructure.Images.Enums;
using Remota.Services.Shared.Infrastructure.Images.Interfaces;
using Remota.Services.Shared.Infrastructure.Repository.Interfaces;
using Remota.Shared.Enums;
using Remota.Shared.Exceptions;
using Remota.Shared.Services;
using Remota.WebConfig.Models;
using Remota.WebConfig.Resources;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using dbModels = Remota.Server.Database.Models;

namespace Remota.WebConfig.Modules
{
    public class UsersModule : NancyModule
    {
        private readonly ILoggerService _logger;
        private readonly IUsersService _usersService;
        private readonly ISecurityRepository _securityRepository;
        private readonly IAccessGroupRepository _accessGroupRepository;
        private readonly ICstaProfilesRepository _cstaProfileRepository;
        private readonly IImageHandler _imageHandler;
        private readonly ISecurityService _securityService;

        public UsersModule(ILoggerService logger,
            IUsersService usersService,
            ISecurityRepository securityRepository,
            IAccessGroupRepository accessGroupRepository,
            ICstaProfilesRepository cstaProfileRepository,
            IImageHandler imageHandler,
            ISecurityService securityService)
        {
            _logger = logger;
            _usersService = usersService;
            _securityRepository = securityRepository;
            _accessGroupRepository = accessGroupRepository;
            _cstaProfileRepository = cstaProfileRepository;
            _imageHandler = imageHandler;
            _securityService = securityService;

            if (Debugger.IsAttached)
                this.RequiresApiAuthentication();
            else this.RequiresAuthentication();

            Get["/web/users"] = _ =>
            {
                var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                if (!access)
                    return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };

                return View["Users.cshtml"];
            };

            Get["/api/users"] = _ =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                    }

                    var users = _usersService.GetAll();
                    var securities = _securityRepository.GetAll();
                    var accessGroups = _accessGroupRepository.GetAll();
                    var cstaProfiles = cstaProfileRepository.GetAll();
                    var result = new List<UserModel>();
                    foreach (var user in users)
                    {
                        var resultUser = new UserModel(user,
                            securities.FirstOrDefault(x => x.Guid == user.SecurityGuid),
                            accessGroups.FirstOrDefault(x => x.Guid == user.AccessGroupGuid),
                            cstaProfiles.FirstOrDefault(x => x.Guid == user.CstaProfileGuid));
                        result.Add(resultUser);
                    }

                    return Response.AsJson(result);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);
                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUsers };
                }
            };

            Get["/api/avatars"] = x =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                    }

                    int id = Request.Query["id"];
                    char sex = Request.Query["sex"];

                    string contentType = "image/jpg";


                    switch (id)
                    {
                        case 0:
                            if (sex == (char)UserCommandSex.Male)
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarMen1, 100), contentType);
                            else
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarWoman1, 100), contentType);
                        case 1:
                            if (sex == (char)UserCommandSex.Male)
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarMen2, 100), contentType);
                            else
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarWoman2, 100), contentType);
                        case 2:
                            if (sex == (char)UserCommandSex.Male)
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarMen3, 100), contentType);
                            else
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarWoman3, 100), contentType);
                        case 3:
                            if (sex == (char)UserCommandSex.Male)
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarMen4, 100), contentType);
                            else
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarWoman4, 100), contentType);
                        case 4:
                            if (sex == (char)UserCommandSex.Male)
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarMen5, 100), contentType);
                            else
                                return Response.FromStream(_imageHandler.ResizeImage(ServerResources.AvatarWoman5, 100), contentType);
                        default:
                            //return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.BadRequest);
                            // return Negotiate.WithAllowedMediaRange("application/json").WithModel(new object()).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(WebResources.Error_FailureValidatingItem);

                            return Response.AsJson(new object()).WithStatusCode(HttpStatusCode.BadRequest);
                    }
                }
                catch (Exception e)
                {
                    _logger.LogError(e);
                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUsers };
                }
            };

            Get["/api/users/{id}"] = parameters =>
             {
                 try
                 {
                     if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                     {
                         var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                         if (!access)
                             return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                     }

                     var user = _usersService.Find(x => x.Guid == new Guid(parameters.id));
                     var security = _securityRepository.Find(x => x.Guid == user.SecurityGuid);
                     var accessGroup = _accessGroupRepository.Find(x => x.Guid == user.AccessGroupGuid);
                     var cstaProfile = _cstaProfileRepository.Find(x => x.Guid == user.CstaProfileGuid);
                     var userResponse = new UserModel(user, security, accessGroup, cstaProfile);
                     return Response.AsJson(userResponse);
                 }
                 catch (Exception e)
                 {
                     _logger.LogError(e);
                     return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUsers };
                 }
             };

            Get["/api/users/current-user-guid"] = _ =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                        return Response.AsJson(((UserIdentity)Context.CurrentUser).Guid);
                    }
                    else return Response.AsJson(_usersService.Find(x => x.Guid != null).Guid);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUserGuid };
                }
            };

            Get["/api/users/{id}/security-properties/groups/{group}/properties/{name}"] = parameters =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                    }

                    var user = _usersService.Find(x => x.Guid == parameters.id);
                    var properties = _securityRepository.Find(x => x.Guid == user.SecurityGuid).Properties;

                    var result = properties.Find(x => x.Group.ToString().ToUpper() == parameters.group.ToString().ToUpper() && x.Name.ToUpper() == parameters.name.ToString().ToUpper());

                    return Response.AsJson(result);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);
                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = WebResources.Error_FailureObtainingUsers };
                }

            };

            Post["/api/users/add", true] = async (_, __) =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                    }

                    var model = this.Bind<UserModel>(x => x.Guid);
                    var result = this.Validate(model);
                    if (result.IsValid)
                    {
                        await _usersService.AddAsync(WebUserRequestModelToDbUserModel(model));
                        //juci return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.OK);
                        return Response.AsJson(new object(), HttpStatusCode.OK);
                    }
                    else
                    {
                        //juci return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(Resources.WebResources.Error_FailureValidatingItem);
                        return Negotiate.WithAllowedMediaRange("application/json").WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(WebResources.Error_FailureValidatingItem);
                    }
                }
                catch (TreatedException e)
                {
                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(e.Message);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = Resources.WebResources.Error_FailureSavingUser };
                }
            };

            Post["/api/users/update", true] = async (_, __) =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                    }

                    var model = this.Bind<UserModel>();
                    var result = this.Validate(model);

                    if (result.IsValid)
                    {
                        await _usersService.UpdateAsync(WebUserRequestModelToDbUserModel(model)).ConfigureAwait(false);
                        //return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.OK);
                        return Response.AsJson(new object(), HttpStatusCode.OK);
                    }
                    else
                    {
                        //return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(Resources.WebResources.Error_FailureValidatingItem);
                        return Negotiate.WithAllowedMediaRange("application/json").WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(WebResources.Error_FailureValidatingItem);
                    }
                }
                catch (TreatedException e)
                {
                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(e.Message);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return new Response { StatusCode = HttpStatusCode.InternalServerError, ReasonPhrase = Resources.WebResources.Error_FailureSavingUser };
                }
            };

            Post["/api/users/delete", true] = async (_, __) =>
            {
                try
                {
                    if (string.IsNullOrWhiteSpace(Context.Request.Headers.Authorization))
                    {
                        var access = _securityService.CheckUserAccess(((UserIdentity)Context.CurrentUser).Guid, "ChangeUsers");
                        if (!access)
                            return new Response { StatusCode = HttpStatusCode.Forbidden, ReasonPhrase = WebResources.Error_PermissionDenied };
                    }

                    foreach (var record in this.Bind<IEnumerable<UserModel>>())
                    {
                        var result = this.Validate(record);
                        if (result.IsValid)
                        {
                            await _usersService.DeleteAsync(WebUserRequestModelToDbUserModel(record)).ConfigureAwait(false);
                            //await _usersService.DeleteAsync(WebUserRequestModelToDbUserModel(record).Guid);
                        }
                        else
                        {
                            //return Negotiate.WithModel(result).WithStatusCode(HttpStatusCode.BadRequest);
                            return Negotiate.WithAllowedMediaRange("application/json").WithModel(result).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(WebResources.Error_FailureValidatingItem);
                        }
                    }

                    //return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.OK);
                    return Response.AsJson(new object(), HttpStatusCode.OK);
                }
                catch (ClientConnectedException e)
                {
                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.Conflict).WithReasonPhrase(e.Message);
                }
                catch (TreatedException e)
                {
                    return Negotiate.WithModel(new object()).WithStatusCode(HttpStatusCode.BadRequest).WithReasonPhrase(e.Message);
                }
                catch (Exception e)
                {
                    _logger.LogError(e);

                    return Negotiate.WithStatusCode(HttpStatusCode.InternalServerError).WithReasonPhrase(WebResources.Error_FailureDeletingUser);
                }
            };
        }

        private dbModels.UserModel WebUserRequestModelToDbUserModel(UserModel user)
        {
            var result = new dbModels.UserModel();
            result.Guid = user.Guid ?? Guid.Empty;
            result.Avatar = user.Avatar;
            result.Password = user.Password;
            result.MustChangePassword = user.ForcePasswordChange;
            result.Blocked = user.Blocked;
            result.Username = user.UserName;
            result.FullName = user.FullName;
            if (user.AccessGroupGuid != Guid.Empty)
            {
                result.AccessGroupGuid = user.AccessGroupGuid;
            }
            result.SecurityGuid = user.SecurityGuid;
            result.Sex = user.Gender == (char)Gender.Male ? dbModels.UserModelSex.Male : dbModels.UserModelSex.Female;
            result.Email = user.Email;
            result.TrboNetUserName = user.IntegrationUserName;
            result.Phone = user.PhoneNumber;
            result.Mobile = user.MobilePhoneNumber;
            result.ActiveAdminAccess = user.AdministrativeAccess;
            result.ActiveConsoleAccess = user.ConsoleAccess;
            result.ActiveRadarAccess = user.TXRoIPRadarAccess;
            result.ActiveWebAccess = user.WebAccess;

            switch (user.ProfileImageType)
            {
                case "avatar":
                    result.ProfileImageType = ProfileImageType.Avatar;
                    break;
                case "photo":
                    result.ProfileImageType = ProfileImageType.Photo;
                    break;
                case "none":
                    result.ProfileImageType = ProfileImageType.None;
                    break;
            }
            result.CstaProfileGuid = user.CstaProfileGuid;

            if (result.ProfileImageType == ProfileImageType.Photo)
            {
                var imgContent = user.ProfilePicture?.Split(',')?.Last();
                result.Photo32 = !string.IsNullOrWhiteSpace(user.ProfilePicture) ? ResizeProfilePicture(Convert.FromBase64String(imgContent), ImageMaxWidth.To32) : null;
                result.Photo48 = !string.IsNullOrWhiteSpace(user.ProfilePicture) ? ResizeProfilePicture(Convert.FromBase64String(imgContent), ImageMaxWidth.To48) : null;
            }
            else
            {
                result.Photo32 = null;
                result.Photo48 = null;
            }

            return result;
        }

        private byte[] ResizeProfilePicture(byte[] image, ImageMaxWidth maxWidth)
        {
            return _imageHandler.ResizeImage(image, 100).ToArray();
        }
    }
}
